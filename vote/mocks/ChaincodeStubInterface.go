// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	peer "github.com/hyperledger/fabric-protos-go/peer"
	mock "github.com/stretchr/testify/mock"

	shim "github.com/hyperledger/fabric-chaincode-go/shim"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ChaincodeStubInterface is an autogenerated mock type for the ChaincodeStubInterface type
type ChaincodeStubInterface struct {
	mock.Mock
}

// CreateCompositeKey provides a mock function with given fields: objectType, attributes
func (_m *ChaincodeStubInterface) CreateCompositeKey(objectType string, attributes []string) (string, error) {
	ret := _m.Called(objectType, attributes)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []string) string); ok {
		r0 = rf(objectType, attributes)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(objectType, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelPrivateData provides a mock function with given fields: collection, key
func (_m *ChaincodeStubInterface) DelPrivateData(collection string, key string) error {
	ret := _m.Called(collection, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(collection, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelState provides a mock function with given fields: key
func (_m *ChaincodeStubInterface) DelState(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArgs provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetArgs() [][]byte {
	ret := _m.Called()

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// GetArgsSlice provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetArgsSlice() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBinding provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetBinding() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelID provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetChannelID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCreator provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetCreator() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDecorations provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetDecorations() map[string][]byte {
	ret := _m.Called()

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func() map[string][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	return r0
}

// GetFunctionAndParameters provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetFunctionAndParameters() (string, []string) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func() []string); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

// GetHistoryForKey provides a mock function with given fields: key
func (_m *ChaincodeStubInterface) GetHistoryForKey(key string) (shim.HistoryQueryIteratorInterface, error) {
	ret := _m.Called(key)

	var r0 shim.HistoryQueryIteratorInterface
	if rf, ok := ret.Get(0).(func(string) shim.HistoryQueryIteratorInterface); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.HistoryQueryIteratorInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateData provides a mock function with given fields: collection, key
func (_m *ChaincodeStubInterface) GetPrivateData(collection string, key string) ([]byte, error) {
	ret := _m.Called(collection, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(collection, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(collection, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateDataByPartialCompositeKey provides a mock function with given fields: collection, objectType, keys
func (_m *ChaincodeStubInterface) GetPrivateDataByPartialCompositeKey(collection string, objectType string, keys []string) (shim.StateQueryIteratorInterface, error) {
	ret := _m.Called(collection, objectType, keys)

	var r0 shim.StateQueryIteratorInterface
	if rf, ok := ret.Get(0).(func(string, string, []string) shim.StateQueryIteratorInterface); ok {
		r0 = rf(collection, objectType, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(collection, objectType, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateDataByRange provides a mock function with given fields: collection, startKey, endKey
func (_m *ChaincodeStubInterface) GetPrivateDataByRange(collection string, startKey string, endKey string) (shim.StateQueryIteratorInterface, error) {
	ret := _m.Called(collection, startKey, endKey)

	var r0 shim.StateQueryIteratorInterface
	if rf, ok := ret.Get(0).(func(string, string, string) shim.StateQueryIteratorInterface); ok {
		r0 = rf(collection, startKey, endKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(collection, startKey, endKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateDataHash provides a mock function with given fields: collection, key
func (_m *ChaincodeStubInterface) GetPrivateDataHash(collection string, key string) ([]byte, error) {
	ret := _m.Called(collection, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(collection, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(collection, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateDataQueryResult provides a mock function with given fields: collection, query
func (_m *ChaincodeStubInterface) GetPrivateDataQueryResult(collection string, query string) (shim.StateQueryIteratorInterface, error) {
	ret := _m.Called(collection, query)

	var r0 shim.StateQueryIteratorInterface
	if rf, ok := ret.Get(0).(func(string, string) shim.StateQueryIteratorInterface); ok {
		r0 = rf(collection, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(collection, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateDataValidationParameter provides a mock function with given fields: collection, key
func (_m *ChaincodeStubInterface) GetPrivateDataValidationParameter(collection string, key string) ([]byte, error) {
	ret := _m.Called(collection, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(collection, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(collection, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResult provides a mock function with given fields: query
func (_m *ChaincodeStubInterface) GetQueryResult(query string) (shim.StateQueryIteratorInterface, error) {
	ret := _m.Called(query)

	var r0 shim.StateQueryIteratorInterface
	if rf, ok := ret.Get(0).(func(string) shim.StateQueryIteratorInterface); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResultWithPagination provides a mock function with given fields: query, pageSize, bookmark
func (_m *ChaincodeStubInterface) GetQueryResultWithPagination(query string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error) {
	ret := _m.Called(query, pageSize, bookmark)

	var r0 shim.StateQueryIteratorInterface
	if rf, ok := ret.Get(0).(func(string, int32, string) shim.StateQueryIteratorInterface); ok {
		r0 = rf(query, pageSize, bookmark)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}

	var r1 *peer.QueryResponseMetadata
	if rf, ok := ret.Get(1).(func(string, int32, string) *peer.QueryResponseMetadata); ok {
		r1 = rf(query, pageSize, bookmark)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*peer.QueryResponseMetadata)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int32, string) error); ok {
		r2 = rf(query, pageSize, bookmark)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSignedProposal provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetSignedProposal() (*peer.SignedProposal, error) {
	ret := _m.Called()

	var r0 *peer.SignedProposal
	if rf, ok := ret.Get(0).(func() *peer.SignedProposal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*peer.SignedProposal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields: key
func (_m *ChaincodeStubInterface) GetState(key string) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateByPartialCompositeKey provides a mock function with given fields: objectType, keys
func (_m *ChaincodeStubInterface) GetStateByPartialCompositeKey(objectType string, keys []string) (shim.StateQueryIteratorInterface, error) {
	ret := _m.Called(objectType, keys)

	var r0 shim.StateQueryIteratorInterface
	if rf, ok := ret.Get(0).(func(string, []string) shim.StateQueryIteratorInterface); ok {
		r0 = rf(objectType, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(objectType, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateByPartialCompositeKeyWithPagination provides a mock function with given fields: objectType, keys, pageSize, bookmark
func (_m *ChaincodeStubInterface) GetStateByPartialCompositeKeyWithPagination(objectType string, keys []string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error) {
	ret := _m.Called(objectType, keys, pageSize, bookmark)

	var r0 shim.StateQueryIteratorInterface
	if rf, ok := ret.Get(0).(func(string, []string, int32, string) shim.StateQueryIteratorInterface); ok {
		r0 = rf(objectType, keys, pageSize, bookmark)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}

	var r1 *peer.QueryResponseMetadata
	if rf, ok := ret.Get(1).(func(string, []string, int32, string) *peer.QueryResponseMetadata); ok {
		r1 = rf(objectType, keys, pageSize, bookmark)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*peer.QueryResponseMetadata)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, []string, int32, string) error); ok {
		r2 = rf(objectType, keys, pageSize, bookmark)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStateByRange provides a mock function with given fields: startKey, endKey
func (_m *ChaincodeStubInterface) GetStateByRange(startKey string, endKey string) (shim.StateQueryIteratorInterface, error) {
	ret := _m.Called(startKey, endKey)

	var r0 shim.StateQueryIteratorInterface
	if rf, ok := ret.Get(0).(func(string, string) shim.StateQueryIteratorInterface); ok {
		r0 = rf(startKey, endKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(startKey, endKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateByRangeWithPagination provides a mock function with given fields: startKey, endKey, pageSize, bookmark
func (_m *ChaincodeStubInterface) GetStateByRangeWithPagination(startKey string, endKey string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error) {
	ret := _m.Called(startKey, endKey, pageSize, bookmark)

	var r0 shim.StateQueryIteratorInterface
	if rf, ok := ret.Get(0).(func(string, string, int32, string) shim.StateQueryIteratorInterface); ok {
		r0 = rf(startKey, endKey, pageSize, bookmark)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}

	var r1 *peer.QueryResponseMetadata
	if rf, ok := ret.Get(1).(func(string, string, int32, string) *peer.QueryResponseMetadata); ok {
		r1 = rf(startKey, endKey, pageSize, bookmark)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*peer.QueryResponseMetadata)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int32, string) error); ok {
		r2 = rf(startKey, endKey, pageSize, bookmark)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStateValidationParameter provides a mock function with given fields: key
func (_m *ChaincodeStubInterface) GetStateValidationParameter(key string) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStringArgs provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetStringArgs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetTransient provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetTransient() (map[string][]byte, error) {
	ret := _m.Called()

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func() map[string][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxID provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetTxID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTxTimestamp provides a mock function with given fields:
func (_m *ChaincodeStubInterface) GetTxTimestamp() (*timestamppb.Timestamp, error) {
	ret := _m.Called()

	var r0 *timestamppb.Timestamp
	if rf, ok := ret.Get(0).(func() *timestamppb.Timestamp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestamppb.Timestamp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeChaincode provides a mock function with given fields: chaincodeName, args, channel
func (_m *ChaincodeStubInterface) InvokeChaincode(chaincodeName string, args [][]byte, channel string) peer.Response {
	ret := _m.Called(chaincodeName, args, channel)

	var r0 peer.Response
	if rf, ok := ret.Get(0).(func(string, [][]byte, string) peer.Response); ok {
		r0 = rf(chaincodeName, args, channel)
	} else {
		r0 = ret.Get(0).(peer.Response)
	}

	return r0
}

// PutPrivateData provides a mock function with given fields: collection, key, value
func (_m *ChaincodeStubInterface) PutPrivateData(collection string, key string, value []byte) error {
	ret := _m.Called(collection, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(collection, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutState provides a mock function with given fields: key, value
func (_m *ChaincodeStubInterface) PutState(key string, value []byte) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetEvent provides a mock function with given fields: name, payload
func (_m *ChaincodeStubInterface) SetEvent(name string, payload []byte) error {
	ret := _m.Called(name, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(name, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPrivateDataValidationParameter provides a mock function with given fields: collection, key, ep
func (_m *ChaincodeStubInterface) SetPrivateDataValidationParameter(collection string, key string, ep []byte) error {
	ret := _m.Called(collection, key, ep)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(collection, key, ep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStateValidationParameter provides a mock function with given fields: key, ep
func (_m *ChaincodeStubInterface) SetStateValidationParameter(key string, ep []byte) error {
	ret := _m.Called(key, ep)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(key, ep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SplitCompositeKey provides a mock function with given fields: compositeKey
func (_m *ChaincodeStubInterface) SplitCompositeKey(compositeKey string) (string, []string, error) {
	ret := _m.Called(compositeKey)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(compositeKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(string) []string); ok {
		r1 = rf(compositeKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(compositeKey)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
